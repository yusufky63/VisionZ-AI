/**
 * @fileoverview Service functions for creating Zora coins - Updated for V4
 * @module createCoin
 */

import {createCoinCall, createCoin} from "@zoralabs/coins-sdk";
import { setApiKey } from "@zoralabs/coins-sdk";
import { base } from 'viem/chains';
import { toast } from 'react-hot-toast';
import { keccak256, toHex } from 'viem';
import { randomBytes } from 'crypto';

// ✅ FIXED: Use direct enum values with better fallback
const DeployCurrency = {
  ZORA: 1,
  ETH: 2
};

// Initialize check for actual SDK values
console.log("Using DeployCurrency values:", DeployCurrency);

// Initialize API key for production environments
// Uses environment variable or allows manual override
const initializeApiKey = () => {
  const apiKey = process.env.NEXT_PUBLIC_ZORA_API_KEY;
  if (apiKey) {
    setApiKey(apiKey);
    console.log("Zora API key initialized from environment variables");
  }
};

// Call initialization on module load
initializeApiKey();

// ✅ NEW: Use canonical factory address (V4 compatible)
const CANONICAL_ZORA_FACTORY_ADDRESS = '0x777777751622c0d3258f214F9DF38E35BF45baF3';

/**
 * Generate deterministic salt for coin deployment
 * @param {string} name - Coin name
 * @param {string} symbol - Coin symbol  
 * @param {string} payoutRecipient - Payout recipient address
 * @returns {string} Salt as hex string
 */
function generateCoinSalt(name, symbol, payoutRecipient) {
  // Create deterministic salt based on coin parameters + random component
  const randomComponent = toHex(randomBytes(8));
  const dataToHash = `${name}-${symbol}-${payoutRecipient}-${randomComponent}`;
  return keccak256(toHex(dataToHash));
}

/**
 * Prepares contract call parameters for coin creation using V4 approach
 * @param {Object} params - Contract call parameters
 * @param {string} params.name - Name of the coin
 * @param {string} params.symbol - Trading symbol for the coin
 * @param {string} params.uri - Metadata URI (IPFS URI recommended)
 * @param {string} params.payoutRecipient - Address that receives creator earnings
 * @param {string[]} [params.owners] - Array of owner addresses
 * @param {string} [params.platformReferrer] - Optional platform referrer address
 * @param {string} [params.currency] - Currency for trading pair (ETH or ZORA)
 * @returns {Promise<object>} Contract call parameters
 */
export async function getCoinCreationParams({
  name,
  symbol,
  uri,
  payoutRecipient,
  owners = [],
  platformReferrer,
  currency = DeployCurrency.ZORA // Default to ZORA on Base mainnet
}) {
  try {
    if (!name || !symbol || !uri || !payoutRecipient) {
      throw new Error("Required parameters missing");
    }

    // Generate deterministic salt for predictable addresses
    const coinSalt = generateCoinSalt(name, symbol, payoutRecipient);

    // If owners array is empty, use payoutRecipient as the owner
    const finalOwners = owners.length > 0 ? owners : [payoutRecipient];

    console.log("Preparing coin creation with V4 canonical factory:", {
      factoryAddress: CANONICAL_ZORA_FACTORY_ADDRESS,
      name,
      symbol,
      uri,
      payoutRecipient,
      owners: finalOwners,
      platformReferrer,
      currency,
      coinSalt
    });

    // ✅ NEW: Use updated SDK with proper V4 parameters
    const sdkParams = await createCoinCall({
      name,
      symbol,
      uri,
      payoutRecipient,
      owners: finalOwners,
      platformReferrer,
      currency,
      chainId: base.id, // Explicitly set chain ID
      // ❌ REMOVED: tickLower - SDK handles this automatically for V4
      // ❌ REMOVED: initialPurchaseWei - handled differently in V4
    });

    console.log("V4 parameters generated by SDK:", sdkParams);

    if (!sdkParams?.abi || !sdkParams?.functionName || !sdkParams?.args) {
      throw new Error("SDK failed to generate valid V4 parameters");
    }

    // ✅ NEW: Use canonical factory address (SDK should already use this)
    const finalParams = {
      ...sdkParams,
      address: CANONICAL_ZORA_FACTORY_ADDRESS,
    };

    console.log("Final V4 parameters for deployment:", finalParams);
    return finalParams;
  } catch (error) {
    console.error("Error preparing V4 contract parameters:", error);
    throw new Error(`Failed to prepare V4 contract parameters: ${error.message}`);
  }
} 

/**
 * Creates a Zora coin using the V4 SDK approach
 * @param {Object} params - Coin creation parameters
 * @param {string} params.name - Name of the coin
 * @param {string} params.symbol - Trading symbol for the coin
 * @param {string} params.uri - Metadata URI (IPFS URI recommended)
 * @param {string} params.payoutRecipient - Address that receives creator earnings
 * @param {Array<string>} [params.owners] - Optional array of owner addresses
 * @param {string} [params.platformReferrer] - Optional platform referrer address
 * @param {number} [params.currency] - Currency for trading pair (1=ZORA, 2=ETH)
 * @param {bigint} [params.initialPurchaseWei] - Optional initial purchase amount in Wei
 * @param {Object} walletClient - Viem wallet client
 * @param {Object} publicClient - Viem public client
 * @param {Object} [options] - Additional options
 * @param {number} [options.gasMultiplier] - Gas multiplier percentage
 * @returns {Promise<object>} Transaction result with hash, receipt, and coin address
 */
export async function createZoraCoin({
  name,
  symbol,
  uri,
  payoutRecipient,
  owners = [],
  platformReferrer,
  currency = DeployCurrency.ZORA, // Default to ZORA on Base mainnet as per docs
  initialPurchaseWei = 0n
}, walletClient, publicClient) {
  try {
    if (!name || !symbol || !uri || !payoutRecipient) {
      throw new Error("Required parameters missing");
    }
    
    if (!walletClient || !publicClient) {
      throw new Error("Wallet client and public client are required");
    }

    // If owners array is empty, use payoutRecipient as the owner
    const finalOwners = owners.length > 0 ? owners : [payoutRecipient];

    console.log("Creating coin with V4 SDK:", {
      name,
      symbol,
      uri,
      payoutRecipient,
      owners: finalOwners,
      platformReferrer,
      currency,
      currencyName: currency === DeployCurrency.ZORA ? "ZORA" : "ETH",
      currencyDebug: {
        received: currency,
        ZORA_CONSTANT: DeployCurrency.ZORA,
        ETH_CONSTANT: DeployCurrency.ETH,
        isZORA: currency === DeployCurrency.ZORA,
        isETH: currency === DeployCurrency.ETH
      },
      initialPurchaseWei: initialPurchaseWei.toString(),
      factoryAddress: CANONICAL_ZORA_FACTORY_ADDRESS
    });

    // Check for correct chain (Base = 8453)
    const walletChainId = await walletClient.getChainId();
    if (walletChainId !== base.id) {
      toast.error(`You're connected to network ID ${walletChainId}, but Base network (${base.id}) is required. Please switch networks.`, { 
        id: "network-error", 
        duration: 5000 
      });
      
      throw new Error(`Chain mismatch: Connected to chain ${walletChainId}, but Base (${base.id}) is required. Please switch networks.`);
    }

    // ✅ CRITICAL FIX: Use exact SDK parameters as documented
    const createCoinParams = {
      name,
      symbol,
      uri,
      payoutRecipient,
      owners: finalOwners,
      platformReferrer,
      // ✅ KEY FIX: Use numeric enum values as per CreateCoin.md documentation
      currency: currency, // Pass the enum value directly (1=ZORA, 2=ETH)
      initialPurchaseWei, // Factory docs say this is supported
      chainId: base.id,
    };

 

    // ✅ CRITICAL: Use V4 SDK with corrected parameters
    const result = await createCoin(
      createCoinParams,
      walletClient,
      publicClient,
      { 
        gasMultiplier: 100, // Add 20% buffer for V4 complexity
        // Let the SDK handle fee estimation for V4
      }
    );

    console.log("V4 Coin created successfully:", {
      hash: result.hash,
      address: result.address,
      version: "V4",
      deploymentCurrency: result.deployment?.currency,
      requestedCurrency: currency,
      requestedCurrencyName: currency === DeployCurrency.ZORA ? "ZORA" : "ETH"
    });

    return result;
  } catch (error) {
    console.error("Error creating V4 coin:", error);
    throw new Error(`Failed to create V4 coin: ${error.message}`);
  }
} 

/**
 * ✅ NEW: Predict coin address before deployment (V4 feature)
 * @param {Object} params - Coin parameters
 * @returns {Promise<string>} Predicted coin address
 */
export async function predictCoinAddress({
  name,
  symbol,
  payoutRecipient,
  owners = [],
  platformReferrer,
  currency = DeployCurrency.ZORA // Default to ZORA on Base mainnet
}) {
  try {
    const coinSalt = generateCoinSalt(name, symbol, payoutRecipient);
    const finalOwners = owners.length > 0 ? owners : [payoutRecipient];

    // This would use the factory's coinAddress function
    // Implementation depends on SDK exposing this functionality
    console.log("Predicting coin address with V4 parameters:", {
      name,
      symbol,
      payoutRecipient,
      owners: finalOwners,
      platformReferrer,
      currency,
      coinSalt
    });

    // For now, return null as SDK may not expose this yet
    return null;
  } catch (error) {
    console.error("Error predicting coin address:", error);
    return null;
  }
} 